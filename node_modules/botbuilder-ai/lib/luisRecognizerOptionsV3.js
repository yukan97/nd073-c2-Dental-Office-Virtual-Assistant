"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LuisRecognizerV3 = exports.isLuisRecognizerOptionsV3 = void 0;
const node_fetch_1 = require("node-fetch");
const luisRecognizerOptions_1 = require("./luisRecognizerOptions");
const botbuilder_core_1 = require("botbuilder-core");
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
const externalEntity_1 = require("./externalEntity");
const dynamicList_1 = require("./dynamicList");
const LUIS_TRACE_TYPE = 'https://www.luis.ai/schemas/trace';
const LUIS_TRACE_NAME = 'LuisRecognizer';
const LUIS_TRACE_LABEL = 'LuisV3 Trace';
const _dateSubtypes = ['date', 'daterange', 'datetime', 'datetimerange', 'duration', 'set', 'time', 'timerange'];
const _geographySubtypes = ['poi', 'city', 'countryRegion', 'continent', 'state'];
const MetadataKey = '$instance';
/**
 * Validates if the options provided are valid [LuisRecognizerOptionsV3](xref:botbuilder-ai.LuisRecognizerOptionsV3).
 *
 * @param {any} options options to type test
 * @returns {boolean} A boolean value that indicates param options is a [LuisRecognizerOptionsV3](xref:botbuilder-ai.LuisRecognizerOptionsV3).
 */
function isLuisRecognizerOptionsV3(options) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return options.apiVersion && options.apiVersion === 'v3';
}
exports.isLuisRecognizerOptionsV3 = isLuisRecognizerOptionsV3;
/**
 * Recognize intents in a user utterance using a configured LUIS model.
 */
class LuisRecognizerV3 extends luisRecognizerOptions_1.LuisRecognizerInternal {
    /**
     * Creates a new [LuisRecognizerV3](xref:botbuilder-ai.LuisRecognizerV3) instance.
     *
     * @param {LuisApplication} application An object conforming to the [LuisApplication](xref:botbuilder-ai.LuisApplication) definition or a string representing a LUIS application endpoint, usually retrieved from https://luis.ai.
     * @param {LuisRecognizerOptionsV3} options Optional. Options object used to control predictions. Should conform to the [LuisRecognizerOptionsV3](xref:botbuilder-ai.LuisRecognizerOptionsV3) definition.
     */
    constructor(application, options) {
        super(application);
        this.predictionOptions = Object.assign({ includeAllIntents: false, includeInstanceData: true, log: true, preferExternalEntities: true, datetimeReference: '', slot: 'production', telemetryClient: new botbuilder_core_1.NullTelemetryClient(), logPersonalInformation: false, includeAPIResults: true }, options);
    }
    /**
     * Calls LUIS to recognize intents and entities in a users utterance.
     *
     * @param {TurnContext} context The [TurnContext](xref:botbuilder-core.TurnContext).
     * @returns {Promise<RecognizerResult>} Analysis of utterance in form of [RecognizerResult](xref:botbuilder-core.RecognizerResult).
     */
    recognizeInternal(context) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (context instanceof botbuilder_dialogs_1.DialogContext) {
                const dialogContext = context;
                const activity = dialogContext.context.activity;
                let options = this.predictionOptions;
                if (options.externalEntityRecognizer) {
                    // call external entity recognizer
                    const matches = yield options.externalEntityRecognizer.recognize(dialogContext, activity);
                    // TODO: checking for 'text' because we get an extra non-real entity from the text recognizers
                    if (matches.entities && Object.entries(matches.entities).length) {
                        options = {
                            apiVersion: 'v3',
                            externalEntities: [],
                        };
                        const entities = matches.entities;
                        const instance = entities['$instance'];
                        if (instance) {
                            Object.entries(entities)
                                .filter(([key, _value]) => key !== 'text' && key !== '$instance')
                                .reduce((externalEntities, [key, value]) => {
                                const instances = instance[`${key}`];
                                const values = Array.isArray(value) ? value : [];
                                if ((instances === null || instances === void 0 ? void 0 : instances.length) === (values === null || values === void 0 ? void 0 : values.length)) {
                                    instances.forEach((childInstance) => {
                                        if (childInstance &&
                                            Object.prototype.hasOwnProperty.call(childInstance, 'startIndex') &&
                                            Object.prototype.hasOwnProperty.call(childInstance, 'endIndex')) {
                                            const start = childInstance['startIndex'];
                                            const end = childInstance['endIndex'];
                                            externalEntities.push({
                                                entityName: key,
                                                startIndex: start,
                                                entityLength: end - start,
                                                resolution: value,
                                            });
                                        }
                                    });
                                }
                                return externalEntities;
                            }, options.externalEntities);
                        }
                    }
                }
                // call luis recognizer with options.externalEntities populated from externalEntityRecognizer
                return this.recognize(dialogContext.context, (_a = activity === null || activity === void 0 ? void 0 : activity.text) !== null && _a !== void 0 ? _a : '', options);
            }
            else {
                const turnContext = context;
                return this.recognize(turnContext, (_c = (_b = turnContext === null || turnContext === void 0 ? void 0 : turnContext.activity) === null || _b === void 0 ? void 0 : _b.text) !== null && _c !== void 0 ? _c : '', this.predictionOptions);
            }
        });
    }
    recognize(context, utterance, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!utterance.trim()) {
                // Bypass LUIS if the activity's text is null or whitespace
                return Promise.resolve({
                    text: utterance,
                    intents: {},
                    entities: {},
                });
            }
            const uri = this.buildUrl(options);
            const httpOptions = this.buildRequestBody(utterance, options);
            const data = yield node_fetch_1.default(uri, httpOptions);
            const response = yield data.json();
            if (response.error) {
                const errObj = response.error;
                const errMessage = errObj.code ? `${errObj.code}: ${errObj.message}` : errObj.message;
                throw new Error(`[LUIS Recognition Error]: ${errMessage}`);
            }
            const result = {
                text: utterance,
                intents: getIntents(response.prediction),
                entities: extractEntitiesAndMetadata(response.prediction),
                sentiment: getSentiment(response.prediction),
                luisResult: this.predictionOptions.includeAPIResults ? response : null,
            };
            if (this.predictionOptions.includeInstanceData) {
                result.entities[MetadataKey] = result.entities[MetadataKey] ? result.entities[MetadataKey] : {};
            }
            this.emitTraceInfo(context, response.prediction, result, options);
            return result;
        });
    }
    buildUrl(options) {
        const baseUri = this.application.endpoint || 'https://westus.api.cognitive.microsoft.com';
        let uri = `${baseUri}/luis/prediction/v3.0/apps/${this.application.applicationId}`;
        if (options.version) {
            uri += `/versions/${options.version}/predict`;
        }
        else {
            uri += `/slots/${options.slot}/predict`;
        }
        const params = `?verbose=${options.includeInstanceData}&log=${options.log}&show-all-intents=${options.includeAllIntents}`;
        uri += params;
        return uri;
    }
    buildRequestBody(utterance, options) {
        const content = {
            query: utterance,
            options: {
                preferExternalEntities: options.preferExternalEntities,
            },
        };
        if (options.datetimeReference) {
            content.options['datetimeReference'] = options.datetimeReference;
        }
        if (options.dynamicLists) {
            options.dynamicLists.forEach((list) => dynamicList_1.validateDynamicList(list));
            content['dynamicLists'] = options.dynamicLists;
        }
        if (options.externalEntities) {
            options.externalEntities.forEach((entity) => externalEntity_1.validateExternalEntity(entity));
            content['externalEntities'] = options.externalEntities;
        }
        return {
            method: 'POST',
            body: JSON.stringify(content),
            headers: {
                'Content-Type': 'application/json',
                'Ocp-Apim-Subscription-Key': this.application.endpointKey,
            },
        };
    }
    emitTraceInfo(context, luisResult, recognizerResult, options) {
        const traceInfo = {
            recognizerResult: recognizerResult,
            luisResult: luisResult,
            luisOptions: options,
            luisModel: {
                ModelID: this.application.applicationId,
            },
        };
        return context.sendActivity({
            type: 'trace',
            valueType: LUIS_TRACE_TYPE,
            name: LUIS_TRACE_NAME,
            label: LUIS_TRACE_LABEL,
            value: traceInfo,
        });
    }
}
exports.LuisRecognizerV3 = LuisRecognizerV3;
function normalizeName(name) {
    return name.replace(/\.| /g, '_');
}
function getIntents(luisResult) {
    // let intents: { [name: string]: { score: number } } = {};
    const intents = {};
    if (luisResult.intents) {
        for (const intent in luisResult.intents) {
            intents[normalizeName(intent)] = { score: luisResult.intents[intent].score };
        }
    }
    return intents;
}
function normalizeEntity(entity) {
    const splitEntity = entity.split(':');
    const entityName = splitEntity[splitEntity.length - 1];
    return entityName.replace(/\.| /g, '_');
}
function mapProperties(source, inInstance) {
    let result = source;
    if (source instanceof Array) {
        const narr = [];
        for (const item of source) {
            // Check if element is geographyV2
            let isGeographyV2 = '';
            if (item['type'] && _geographySubtypes.includes(item['type'])) {
                isGeographyV2 = item['type'];
            }
            if (!inInstance && isGeographyV2) {
                const geoEntity = {};
                for (const itemProps in item) {
                    if (itemProps === 'value') {
                        geoEntity.location = item[itemProps];
                    }
                }
                geoEntity.type = isGeographyV2;
                narr.push(geoEntity);
            }
            else {
                narr.push(mapProperties(item, inInstance));
            }
        }
        result = narr;
    }
    else if (source instanceof Object && typeof source !== 'string') {
        const nobj = {};
        // Fix datetime by reverting to simple timex
        if (!inInstance && source.type && typeof source.type === 'string' && _dateSubtypes.includes(source.type)) {
            const timexs = source.values;
            const arr = [];
            if (timexs) {
                const unique = [];
                for (const elt of timexs) {
                    if (elt.timex && !unique.includes(elt.timex)) {
                        unique.push(elt.timex);
                    }
                }
                for (const timex of unique) {
                    arr.push(timex);
                }
                nobj.timex = arr;
            }
            nobj.type = source.type;
        }
        else {
            // Map or remove properties
            for (const property in source) {
                const name = normalizeEntity(property);
                const isArray = source[property] instanceof Array;
                const isString = typeof source[property] === 'string';
                const isInt = Number.isInteger(source[property]);
                const val = mapProperties(source[property], inInstance || property == MetadataKey);
                if (name == 'datetime' && isArray) {
                    nobj.datetimeV1 = val;
                }
                else if (name == 'datetimeV2' && isArray) {
                    nobj.datetime = val;
                }
                else if (inInstance) {
                    // Correct $instance issues
                    if (name == 'length' && isInt) {
                        nobj['endIndex'] = source[name] + source.startIndex;
                    }
                    else if (!((isInt && name === 'modelTypeId') || (isString && name === 'role'))) {
                        nobj[name] = val;
                    }
                }
                else {
                    // Correct non-$instance values
                    if (name == 'unit' && isString) {
                        nobj.units = val;
                    }
                    else {
                        nobj[name] = val;
                    }
                }
            }
        }
        result = nobj;
    }
    return result;
}
function extractEntitiesAndMetadata(prediction) {
    const entities = prediction.entities;
    return mapProperties(entities, false);
}
function getSentiment(luis) {
    if (luis.sentiment) {
        return {
            label: luis.sentiment.label,
            score: luis.sentiment.score,
        };
    }
}
//# sourceMappingURL=luisRecognizerOptionsV3.js.map